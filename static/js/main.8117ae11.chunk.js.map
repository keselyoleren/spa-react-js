{"version":3,"sources":["component/Users.js","component/Home.js","component/Article.js","component/Router.js","App.js","serviceWorker.js","index.js"],"names":["Users","props","state","type","items","onSelectedTypeChange","bind","event","this","setState","target","value","fetch","then","response","json","className","onChange","map","item","index","key","id","name","scope","username","email","Component","Home","role","Article","posts","title","body","Router","to","path","component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8117ae11.chunk.js","sourcesContent":["import React, {Component} from 'react'\n\n\nclass Users extends Component{\n    constructor(props){\n        super(props)\n        this.state = {\n            type : '',\n            items:[],           \n        }\n        this.onSelectedTypeChange = this.onSelectedTypeChange.bind(this)\n    }\n\n    onSelectedTypeChange(event){\n        this.setState({\n            type: event.target.value\n        })\n    }\n\n    componentDidMount(){\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(response => response.json())\n            .then(json => this.setState({items:json}))\n    }\n\n    render(){\n        const {items} = this.state\n        return(   \n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-md-12\">\n                        <form>\n                            <select className=\"form-control\" onChange={this.onSelectedTypeChange} >\n                                {items.map((item, index) => <option key={index} value={item.id}>{item.name}</option> )}    \n                            </select>\n                        </form>        \n                    </div>\n                    <div className=\"col-md-12\">\n                        <table className=\"table\">\n                        <thead>\n                            <tr>\n                                <th scope=\"col\">id</th>\n                                <th scope=\"col\">Name</th>\n                                <th scope=\"col\">username</th>\n                                <th scope=\"col\">Email</th>\n                            </tr>\n                        </thead>\n                        <tbody>\n                            {items.map((item, index)=> \n                                <tr key={index}>\n                                    <th>{item.id}</th>\n                                    <td>{item.name}</td>\n                                    <td>{item.username}</td>\n                                    <td>{item.email}</td>\n                                </tr>\n                            )}\n                        </tbody>\n                        </table>\n                    </div>\n                </div>\n            </div>\n        )\n    }\n}\n\nexport default Users","\nimport React, {Component} from 'react'\n\nclass Home extends Component{\n  render(){\n    return(\n      <main role=\"main\" className=\"flex-shrink-0\">\n        <div className=\"container\">\n          <h1 className=\"mt-5\">Home</h1>\n          <p className=\"lead\">Pin a footer to the bottom of the viewport in desktop browsers with this custom HTML and CSS.</p>\n        </div>\n      </main>\n    )\n  }\n}\n\nexport default Home\n","import React, {Component} from 'react'\n\nclass Article extends Component {\n    constructor(props){\n        super(props)\n        this.state = {\n            posts: []\n        }\n    }\n\n    componentDidMount(){\n        fetch('https://jsonplaceholder.typicode.com/posts')\n            .then(response => response.json())\n            .then(json => this.setState({posts:json}))\n    }\n    \n    \n    render() {\n        const {posts} = this.state        \n        return (\n            <div className=\"container\">\n                {posts.map((item, index) => \n                    <div key={index} className=\"card\">\n                        <div className=\"card-body\">\n                            <h5 className=\"card-title\">{item.title}</h5>\n                            <p className=\"card-text\">{item.body}</p>\n                        </div>\n                    </div>\n                )}  \n                <br></br>  \n            </div>\n        )\n    }\n}\n\n\nexport default Article","import React, {Component} from 'react'\nimport {BrowserRouter, Route, Link, Switch} from 'react-router-dom'\nimport Users from './Users.js'\nimport Home from './Home.js'\nimport Article from './Article.js'\n\nclass Router extends Component {\n    render(){\n        return (\n            <BrowserRouter>\n                <div className=\"conatiner\">\n                    <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n                        <div className=\"collapse navbar-collapse\" >\n                        <ul className=\"navbar-nav mr-auto\">\n                            <li className=\"nav-item active\">\n                                <Link className=\"nav-link\" to=\"/\">Home</Link>\n                            </li>\n                            <li className=\"nav-item\">\n                                <Link className=\"nav-link\" to=\"/users\">Users</Link>\n                            </li>\n                            <li className=\"nav-item\">\n                                <Link className=\"nav-link\" to=\"/article\">Posts</Link>\n                            </li>\n                            </ul>\n                        </div>\n                    </nav>\n\n                    <Switch>\n                        <Route path=\"/article\" component={Article}/>\n                        <Route path=\"/users\" component={Users} />\n                        <Route path=\"/\" component={Home}/>\n                        \n                    </Switch>\n                \n                </div>\n            </BrowserRouter>\n        )\n    }\n}\n\nexport default Router","\nimport React, {Component} from 'react'\nimport './App.css';\nimport Router from './component/Router.js'\n\n\n\nclass App extends Component{\n  render(){\n    return(\n        <Router />\n      )\n  }\n  \n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}